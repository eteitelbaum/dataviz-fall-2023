---
title: "Leaflet Maps"
date: today
date-format: long
footer: "[DataViz 2102 Website](https://dataviz-gwu.rocks)"
logo: images/dataviz-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    multiplex: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

```{r}
#| label: setup

library(readr)
library(dplyr)
library(leaflet)

ged_data <- read_csv("data/GEDEvent_v22_1.csv")

ged_yemen <- ged_data |> 
  filter(
    country_id == 678, #gw country code
    year == 2021,
    date_start < "2021-03-01", 
    where_prec < 3, # keep if certain where event occurred
    event_clarity == 1, # keep if event reporting is clear
      ) |> 
  mutate(deaths = deaths_a + deaths_b + deaths_civilians + deaths_unknown) |>
  select(event_id = id,
         country_id,
         date = date_start,
         gov_deaths = deaths_a, 
         rebel_deaths = deaths_b, 
         civilian_deaths = deaths_civilians, 
         deaths, 
         place = where_coordinates,
         latitude, 
         longitude) |>
  sf::st_as_sf(coords = c("longitude", "latitude")) 

icon <- awesomeIcons(
  icon = "ios-close",
  iconColor = "black",
  markerColor = "red", 
  library = "ion" 
)

ged_yemen$popup_text <- sprintf(
      "Date: %s <br> 
       Total Deaths: %.0f <br> 
       Govt. Deaths: %.0f <br> 
       Rebel Deaths: %.0f <br> 
       Civilian Death: %.0f <br>",
      ged_yemen$date, 
      ged_yemen$deaths, 
      ged_yemen$gov_deaths, 
      ged_yemen$rebel_deaths,
      ged_yemen$civilian_deaths
    ) |> lapply(htmltools::HTML)
```


## Leaflet Maps

<br>

- [Leaflet](https://leafletjs.com/) is a JavaScript library for interactive maps
- Makes maps with markers and pop-ups
  - **Markers**-shapes that show the location of something
  - **Pop-ups**-fields that display information about a location or event
- Can see information without navigating away from current view

## Leaflet Map with One Marker

```{r}
#| label: one_marker
#| echo: true
library(leaflet)

leaflet() |>
  addTiles() |>  # Add default OpenStreetMap map tiles
  addMarkers(lng = 45.46916, lat = 14.14912, label = "First conflict event")
```

## Your Turn

<br>

- Make a leaflet map with one marker
- Find the coordinates (longitude and latitude) of your high school
- Or some favorite place
- Enter coordinates into `addMarkers()` call and label the marker

```{r}
#| label: setup_timer
library(countdown)
countdown(minutes = 10, 
          id = "setup", 
          bottom = "10%", 
          right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

## Conflict Map

```{r}
#| label: conflict_map

leaflet(data = ged_yemen) |> # Jan and Feb  
  addProviderTiles("OpenTopoMap") |> # include name of provider here
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~popup_text, 
    label = ~place
    )
```

## Conflict Data

<br>

Download the data from [UCDP](https://ucdp.uu.se/) and load.

<br>

```{r}
#| label: conflict_data
#| echo: true
#| output: false

library(readr)
library(dplyr)

ged_data <- read_csv("data/GEDEvent_v22_1.csv")

## As a last resort
#ged_data <- read_csv("https://raw.githubusercontent.com/eteitelbaum/dataviz-fall-2023/main/modules/data/GEDEvent_v22_1.csv")
```

## Conflict Data Wrangling

```{r}
#| label: conflict_data_cleaning
#| echo: true
#| output: false

ged_yemen <- ged_data |> 
  filter(
    country_id == 678, #gw country code
    year == 2021,
    date_start < "2021-03-01", 
    where_prec < 3, # keep if certain where event occurred
    event_clarity == 1, # keep if event reporting is clear
      ) |> 
  mutate(deaths = deaths_a + deaths_b + deaths_civilians + deaths_unknown) |>
  select(event_id = id,
         country_id,
         date = date_start,
         gov_deaths = deaths_a, 
         rebel_deaths = deaths_b, 
         civilian_deaths = deaths_civilians, 
         deaths, 
         place = where_coordinates,
         latitude, 
         longitude) |>
  sf::st_as_sf(coords = c("longitude", "latitude")) 
```

## Basic Conflict Map

```{r}
#| echo: true
#| output: false

leaflet(data = ged_yemen) |> # map points in ged_yemen data frame
  addTiles() |> # add default tile
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addMarkers(
    popup = ~as.character(deaths), # when user clicks, show deaths
    label = ~place # when user hovers, show town
    )
```

## Basic Conflict Map

```{r}
leaflet(data = ged_yemen) |> # map points in ged_yemen data frame
  addTiles() |> # add default tile
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addMarkers(
    popup = ~as.character(deaths), # when user clicks, show deaths
    label = ~place # when user hovers, show town
    )
```


## Add Awesome Icons

```{r}
#| echo: true
#| output: false

# save icon
icon <- awesomeIcons(
  icon = "ios-close",
  iconColor = "black",
  markerColor = "red", 
  library = "ion" 
)

# Build map
leaflet(data = ged_yemen) |>   
  addTiles() |> 
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~as.character(deaths), 
    label = ~place
    )
```

## Add Awesome Icons

```{r}
# save icon
icon <- awesomeIcons(
  icon = "ios-close",
  iconColor = "black",
  markerColor = "red", 
  library = "ion" 
)

# Build map
leaflet(data = ged_yemen) |>   
  addTiles() |> 
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~as.character(deaths), 
    label = ~place
    )
```

## Change Content of Popup

```{r}
#| echo: true
#| output: false

ged_yemen$popup_text <- sprintf(
      "Date: %s <br> 
       Total Deaths: %.0f <br> 
       Govt. Deaths: %.0f <br> 
       Rebel Deaths: %.0f <br> 
       Civilian Death: %.0f <br>",
      ged_yemen$date, 
      ged_yemen$deaths, 
      ged_yemen$gov_deaths, 
      ged_yemen$rebel_deaths,
      ged_yemen$civilian_deaths
    ) |> lapply(htmltools::HTML)
```

## Use New Labels

```{r}
#| echo: true
#| output: false

leaflet(data = ged_yemen) |>  
  addTiles() |> 
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~popup_text, 
    label = ~place
    )
```


## Conflict Map

```{r}
leaflet(data = ged_yemen) |> # Jan and Feb  
  addProviderTiles("OpenTopoMap") |> # include name of provider here
  setView(lng = 44.1910, lat = 15.3694, zoom = 6) |> # Sana'a coordinates
  addAwesomeMarkers(
    icon = icon, 
    popup = ~popup_text, 
    label = ~place
    )
```

## Your Turn

- Download the data
- Reproduce Yemen map
- Then try another country



